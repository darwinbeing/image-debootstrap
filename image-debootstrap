#!/bin/bash -e

. utils

# Required config overwritten by the config file
img_size_bytes= # $((1024 * 1024 * 512))
arch= # debian architecture, i386|amd64|...
dist= # debian dist, squeeze|wheezy|...
kernel_package= # linux-image-686
root_pwd= # password
hostname=
dhcp_interfaces= # network interfaces with dhcp config "eth0 eth1 .."

# Standard configuration, possible to override in the config file
extra_packages="" # same format as base_packages
serial_console= # ttyS0
serial_console_baud= # 9600|19200|...
flash_drive=false # flash-drive mode, noatime on writable file systems + heavily used folders mounted as tmpfs
apt_mirror=ftp://ftp.no.debian.org/debian/
ssh_server=true
ssh_host_rsa_key_path= # use an existing SSH keypair, a new one is generated by default if this is left blank
ssh_authorized_keys=() # array of keys authorized for SSH access to the root account
ping_broadcast_reply=false

base_packages="netbase,ifupdown,net-tools,isc-dhcp-client,localepurge,procps,less,nano,inetutils-ping,ifplugd"
debootstrap_variant=minbase

# Constants
filesystem=ext2
img_file=work/disk.img
img_mount_dir=work/disk
img_staging_dir=$img_mount_dir.staging


# parse parameters
stage=$1 # install|customize|bundle
shift

config= # config-file
disk_archive= # tar-file contaning the disk.staging folder for further processing
customization_scripts= # path to scripts for the customize phase (using the same layout as install/ & bundle/)

if ( ! getopts "c:" opt ); then
  echo "Usage: `basename $0` install|customize|bundle -c path-to-config-file [-a disk.staging.tar] [-s path-to-customization-scripts]";
  exit $E_OPTERROR;
fi

while getopts "a:c:s:" opt; do
  case $opt in
    a)
      disk_archive=$OPTARG
      ;;
    c)
      config=$OPTARG
      [ -f $config ] || die "$config is not a file"
      ;;
    s)
      customization_scripts=$OPTARG
      [ -d "$customization_scripts" ] || die "$customization_scripts is not a directory"
      ;;
    \?)
      die "Invalid option"
      ;;
  esac
done

# load the custom config
[ -z "$config" ] && die "No config file specified"
. $config

if $ssh_server; then
  base_packages="$base_packages,openssh-server"
fi

echo "Using configuration:"
validate_cfg img_size_bytes $img_size_bytes
validate_cfg arch $arch
validate_cfg dist $dist
validate_cfg kernel_package $kernel_package
validate_cfg root_pwd $root_pwd
validate_cfg hostname $hostname
validate_cfg dhcp_interfaces $dhcp_interfaces

print_cfg extra_packages $extra_packages
print_cfg serial_console $serial_console
print_cfg serial_console_baud $serial_console_baud
print_cfg flash_drive $flash_drive
print_cfg ssh_server $ssh_server
print_cfg ssh_host_rsa_key_path $ssh_host_rsa_key_path
print_cfg ssh_authorized_keys "${#ssh_authorized_keys[@]} key(s)"
print_cfg ping_broadcast_reply $ping_broadcast_reply

print_cfg base_packages $base_packages
print_cfg debootstrap_variant $debootstrap_variant

echo
echo

# handle the selected stage
case $stage in

  install)
    echo "Installing into $img_staging_dir"
    run_in_order install
    archive_staging_dir
    ;;

  customize)
    echo "Customizing installation"
    [ -z "$disk_archive" ] && disk_archive="$img_staging_dir.install.tar"
    extract_staging_dir $disk_archive
    [ -z "$customization_scripts" ] && die "Specify customization scripts using the -s switch"
    run_in_order $customization_scripts
    archive_staging_dir
    ;;

  bundle)
    echo "Creating bootable image in $img_file"
    [ -z "$disk_archive" ] && disk_archive="$img_staging_dir.customize.tar"
    extract_staging_dir $disk_archive
    run_in_order bundle
    ;;

  *)
    die "Invalid stage, use one of install|customize|bundle"
    ;;
esac

# delete the current staging dir & set permissions
remove_staging_dir
set_work_dir_permissions

